'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var get = _interopDefault(require('lodash.get'));
var reactNative = require('react-native');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

var color = {
    black: '#212121',
    greyDarkest: '#242424',
    greyDarker: '#616161',
    greyDark: '#757575',
    grey: '#9e9e9e',
    greyLight: '#bdbdbd',
    greyLighter: '#e0e0e0',
    greyLightest: '#eeeeee',
    white: '#fff',
    redDarkest: '#b71c1c',
    redDarker: '#c62828',
    redDark: '#d32f2f',
    red: '#f44336',
    redLight: '#ef5350',
    redLighter: '#e57373',
    redLightest: '#ef9a9a',
    blueDarkest: '#0d47a1',
    blueDarker: '#1565c0',
    blueDark: '#1976d2',
    blue: '#2196f3',
    blueLight: '#42a5f5',
    blueLighter: '#64b5f6',
    blueLightest: '#90caf9',
    purpleDarkest: '#4a148c',
    purpleDarker: '#6a1b9a',
    purpleDark: '#7b1fa2',
    purple: '#9c27b0',
    purpleLight: '#ab47bc',
    purpleLighter: '#ba68c8',
    purpleLightest: '#ce93d8',
    greenDarkest: '#1b5e20',
    greenDarker: '#2e7d32',
    greenDark: '#388e3c',
    green: '#4caf50',
    greenLight: '#66bb6a',
    greenLighter: '#81c784',
    greenLightest: '#a5d6a7',
};
var theme = {
    text: {
        size: {
            sm: 14,
            base: 16,
            md: 18,
            lg: 20,
            xl: 24,
        },
        weight: {
            light: '200',
            normal: '400',
            bold: '700',
        },
        spacing: {
            tight: 0.8,
            normal: 1,
            wide: 1.5,
        },
        lineHeight: {
            none: 1,
            tight: 1.25,
            normal: 1.5,
            large: 2,
        },
        fonts: {
            base: null,
        },
    },
    color: color,
    space: {
        xs: 8,
        sm: 16,
        md: 24,
        lg: 36,
        xl: 40,
    },
    radius: {
        xs: 6,
        sm: 10,
        base: 14,
        lg: 20,
        xl: 30,
    },
    opacity: {
        none: 0,
        low: 0.3,
        demi: 0.5,
        high: 0.8,
        base: 1,
    },
    shadows: [
        {
            shadowColor: color.black,
            shadowOffset: {
                width: 0,
                height: 0,
            },
            shadowOpacity: 1,
            shadowRadius: 1,
        },
        {
            shadowColor: color.black,
            shadowOffset: {
                width: 0,
                height: 0,
            },
            shadowOpacity: 0.6,
            shadowRadius: 5,
        },
    ],
    borders: [
        {
            borderWidth: 1,
            borderColor: color.black,
        },
        {
            borderWidth: 2,
            borderColor: color.black,
        },
        {
            borderWidth: 5,
            borderColor: color.black,
        },
    ],
    button: {
        disabled: {
            opacity: 0.5,
        },
    },
};

var UtilityThemeContext = React.createContext(theme);
var UtilityThemeProvider = /** @class */ (function (_super) {
    __extends(UtilityThemeProvider, _super);
    function UtilityThemeProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            theme: _this.props.theme || theme,
        };
        return _this;
    }
    UtilityThemeProvider.prototype.render = function () {
        return (React.createElement(UtilityThemeContext.Provider, { value: this.state.theme }, this.props.children));
    };
    UtilityThemeProvider.defaultProps = {
        theme: null,
    };
    return UtilityThemeProvider;
}(React.Component));

function getDisplayName(wrappedComponent) {
    return ("Utility(" + wrappedComponent.displayName + ")" ||
        "Utility(" + wrappedComponent.name + ")" ||
        'Component');
}
function connect(Cp) {
    var _a;
    return _a = /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            class_1.prototype.render = function () {
                var _this = this;
                return (React.createElement(UtilityThemeContext.Consumer, null, function (val) { return React.createElement(Cp, __assign({ theme: val }, _this.props)); }));
            };
            return class_1;
        }(React.PureComponent)),
        _a.displayName = getDisplayName(Cp),
        _a;
}

var spaceUtils = function (props) {
    var _style = {};
    var themeSpace = get(props, ['theme', 'space']);
    if (themeSpace) {
        var mb = get(props, 'mb');
        if (mb) {
            if (typeof mb === 'string') {
                var space = themeSpace[mb];
                if (space) {
                    _style.marginBottom = space;
                }
            }
            else if (typeof mb === 'number') {
                _style.marginBottom = mb;
            }
        }
        var mt = get(props, 'mt');
        if (mt) {
            if (typeof mt === 'string') {
                var space = themeSpace[mt];
                if (space) {
                    _style.marginTop = space;
                }
            }
            else if (typeof mt === 'number') {
                _style.marginTop = mt;
            }
        }
        var mr = get(props, 'mr');
        if (mr) {
            if (typeof mr === 'string') {
                var space = themeSpace[mr];
                if (space) {
                    _style.marginRight = space;
                }
            }
            else if (typeof mr === 'number') {
                _style.marginRight = mr;
            }
        }
        var ml = get(props, 'ml');
        if (ml) {
            if (typeof ml === 'string') {
                var space = themeSpace[ml];
                if (space) {
                    _style.marginLeft = space;
                }
            }
            else if (typeof ml === 'number') {
                _style.marginLeft = ml;
            }
        }
        var my = get(props, 'my');
        if (my) {
            if (typeof my === 'string') {
                var space = themeSpace[my];
                if (space) {
                    _style.marginVertical = space;
                }
            }
            else if (typeof my === 'number') {
                _style.marginVertical = my;
            }
        }
        var mx = get(props, 'mx');
        if (mx) {
            if (typeof mx === 'string') {
                var space = themeSpace[mx];
                if (space) {
                    _style.marginHorizontal = space;
                }
            }
            else if (typeof mx === 'number') {
                _style.marginHorizontal = mx;
            }
        }
        var m = get(props, 'm');
        if (m) {
            if (typeof m === 'string') {
                var space = themeSpace[m];
                if (space) {
                    _style.margin = space;
                }
            }
            else if (typeof m === 'number') {
                _style.margin = m;
            }
        }
        var pb = get(props, 'pb');
        if (pb) {
            if (typeof pb === 'string') {
                var space = themeSpace[pb];
                if (space) {
                    _style.paddingBottom = space;
                }
            }
            else if (typeof pb === 'number') {
                _style.paddingBottom = pb;
            }
        }
        var pt = get(props, 'pt');
        if (pt) {
            if (typeof pt === 'string') {
                var space = themeSpace[pt];
                if (space) {
                    _style.paddingTop = space;
                }
            }
            else if (typeof pt === 'number') {
                _style.paddingTop = pt;
            }
        }
        var pr = get(props, 'pr');
        if (pr) {
            if (typeof pr === 'string') {
                var space = themeSpace[pr];
                if (space) {
                    _style.paddingRight = space;
                }
            }
            else if (typeof pr === 'number') {
                _style.paddingRight = pr;
            }
        }
        var pl = get(props, 'pl');
        if (pl) {
            if (typeof pl === 'string') {
                var space = themeSpace[pl];
                if (space) {
                    _style.paddingLeft = space;
                }
            }
            else if (typeof pl === 'number') {
                _style.paddingLeft = pl;
            }
        }
        var py = get(props, 'py');
        if (py) {
            if (typeof py === 'string') {
                var space = themeSpace[py];
                if (space) {
                    _style.paddingVertical = space;
                }
            }
            else if (typeof py === 'number') {
                _style.paddingVertical = py;
            }
        }
        var px = get(props, 'px');
        if (px) {
            if (typeof px === 'string') {
                var space = themeSpace[px];
                if (space) {
                    _style.paddingHorizontal = space;
                }
            }
            else if (typeof px === 'number') {
                _style.paddingHorizontal = px;
            }
        }
        var p = get(props, 'p');
        if (p) {
            if (typeof p === 'string') {
                var space = themeSpace[p];
                if (space) {
                    _style.padding = space;
                }
            }
            else if (typeof p === 'number') {
                _style.padding = p;
            }
        }
    }
    return _style;
};

var boxAlignUtils = function (props) {
    var _style = {};
    var center = get(props, 'center');
    if (center) {
        _style.justifyContent = 'center';
        _style.alignItems = 'center';
    }
    return _style;
};

var borderUtils = function (props) {
    var _style = {};
    var border = get(props, 'border');
    if (border) {
        var themeBorders = get(props, ['theme', 'borders']);
        if (themeBorders[border]) {
            _style = themeBorders[border];
        }
    }
    return _style;
};

var boxSizeUtils = function (props) {
    var _style = {};
    var h = get(props, 'h');
    if (h) {
        if (typeof h === 'string') {
            _style.height = h;
        }
        else if (typeof h === 'number') {
            if (h < 1) {
                _style.height = h * 100 + "%";
            }
            else {
                _style.height = h;
            }
        }
    }
    var w = get(props, 'w');
    if (w) {
        if (typeof w === 'string') {
            _style.width = w;
        }
        else if (typeof w === 'number') {
            if (w < 1) {
                _style.width = w * 100 + "%";
            }
            else {
                _style.width = w;
            }
        }
    }
    return _style;
};

var boxFlexUtils = function (props) {
    var _style = {};
    if (props.f && typeof props.f === 'number') {
        _style.flex = props.f;
    }
    var dir = get(props, 'dir');
    if (dir) {
        if (dir === 'row') {
            _style.flexDirection = 'row';
        }
        else if (dir === 'row-reverse') {
            _style.flexDirection = 'row-reverse';
        }
        else if (dir === 'col') {
            _style.flexDirection = 'column';
        }
        else if (dir === 'col-reverse') {
            _style.flexDirection = 'column-reverse';
        }
    }
    var align = get(props, 'align');
    if (align) {
        if (align === 'center') {
            _style.alignItems = 'center';
        }
        else if (align === 'start') {
            _style.alignItems = 'flex-start';
        }
        else if (align === 'end') {
            _style.alignItems = 'flex-end';
        }
        else if (align === 'stretch') {
            _style.alignItems = 'stretch';
        }
        else if (align === 'baseline') {
            _style.alignItems = 'baseline';
        }
    }
    var justify = get(props, 'justify');
    if (justify) {
        if (justify === 'center') {
            _style.justifyContent = 'center';
        }
        else if (justify === 'start') {
            _style.justifyContent = 'flex-start';
        }
        else if (justify === 'end') {
            _style.justifyContent = 'flex-end';
        }
        else if (justify === 'between') {
            _style.justifyContent = 'space-between';
        }
        else if (justify === 'around') {
            _style.justifyContent = 'space-around';
        }
        else if (justify === 'evenly') {
            _style.justifyContent = 'space-evenly';
        }
    }
    var self = get(props, 'self');
    if (self) {
        if (self === 'center') {
            _style.alignSelf = 'center';
        }
        else if (self === 'start') {
            _style.alignSelf = 'flex-start';
        }
        else if (self === 'end') {
            _style.alignSelf = 'flex-end';
        }
        else if (self === 'stretch') {
            _style.alignSelf = 'stretch';
        }
        else if (self === 'auto') {
            _style.alignSelf = 'auto';
        }
        else if (self === 'baseline') {
            _style.alignSelf = 'baseline';
        }
    }
    var flexWrap = get(props, 'flexWrap');
    if (flexWrap) {
        _style.flexWrap = flexWrap;
    }
    return _style;
};

var boxRowsUtils = function (props) {
    var newChild = props.children;
    var rows = get(props, 'rows');
    if (rows && Array.isArray(rows)) {
        newChild = React.Children.map(props.children, function (child, i) {
            if (child.type === Box$1) {
                return React.cloneElement(child, {
                    f: rows[i] || 1,
                });
            }
            throw new Error('Each child for a Box with rows need to be a Box');
        });
    }
    return newChild;
};

// TODO: Update this code
var radiusUtils = function (props) {
    var _style = {};
    var themeRadius = get(props, ['theme', 'radius']);
    var radius = get(props, 'radius');
    var circle = get(props, 'circle');
    var avatar = get(props, 'avatar');
    var children = get(props, 'children');
    var newChildren = children;
    if (themeRadius) {
        if (avatar &&
            typeof circle === 'number' &&
            children &&
            React.Children.only(children).type === reactNative.Image) {
            newChildren = React.cloneElement(React.Children.only(children), {
                style: {
                    borderRadius: circle / 2,
                    height: circle,
                    width: circle,
                },
            });
            _style.borderRadius = circle / 2;
            _style.height = circle;
            _style.width = circle;
        }
        else if (typeof circle === 'number') {
            _style.borderRadius = circle / 2;
            _style.height = circle;
            _style.width = circle;
        }
        else if (radius) {
            if (typeof radius === 'string') {
                var _radius = themeRadius[radius];
                if (_radius) {
                    _style.borderRadius = _radius;
                }
                else {
                    if (radius === 'rounded') {
                        var height = get(props, ['size', 'height']);
                        var width = get(props, ['size', 'width']);
                        if (typeof height === 'number' && typeof width === 'number') {
                            _style.borderRadius = 99999;
                        }
                    }
                }
            }
            else if (typeof radius === 'boolean') {
                var base = get(themeRadius, 'base');
                if (base) {
                    _style.borderRadius = base;
                }
            }
            else if (typeof radius === 'number') {
                _style.borderRadius = radius;
            }
        }
    }
    return {
        style: _style,
        children: newChildren,
    };
};

var shadowUtils = function (props) {
    var _style = {};
    var shadow = get(props, 'shadow');
    if (typeof shadow === 'number') {
        var themeShadows = get(props, ['theme', 'shadows']);
        var _shadow = themeShadows[shadow];
        if (_shadow) {
            _style = _shadow;
        }
    }
    return _style;
};

var opacityUtils = function (props) {
    var _style = {};
    var opacity = get(props, 'o');
    if (typeof opacity === 'string') {
        var themeOpacity = get(props, ['theme', 'opacity']);
        if (themeOpacity) {
            var _opacity = themeOpacity[opacity];
            if (_opacity) {
                _style.opacity = _opacity;
            }
        }
    }
    else if (typeof opacity === 'number') {
        _style.opacity = opacity;
    }
    return _style;
};

var flattenStyle = function (style) {
    if (style === null || typeof style !== 'object') {
        return undefined;
    }
    if (!Array.isArray(style)) {
        return style;
    }
    var result = {};
    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
        var computedStyle = flattenStyle(style[i]);
        if (computedStyle) {
            for (var key in computedStyle) {
                // @ts-ignore
                result[key] = computedStyle[key];
            }
        }
    }
    return result;
};

var positionUtils = function (props) {
    var _style = {};
    var position = get(props, 'position');
    if (position) {
        _style.position = position;
    }
    return _style;
};

var Box = function (_a) {
    var theme = _a.theme, m = _a.m, mb = _a.mb, mt = _a.mt, mr = _a.mr, ml = _a.ml, my = _a.my, mx = _a.mx, p = _a.p, pb = _a.pb, py = _a.py, pt = _a.pt, pr = _a.pr, pl = _a.pl, px = _a.px, radius = _a.radius, avatar = _a.avatar, circle = _a.circle, center = _a.center, border = _a.border, shadow = _a.shadow, f = _a.f, h = _a.h, w = _a.w, align = _a.align, justify = _a.justify, self = _a.self, dir = _a.dir, flexWrap = _a.flexWrap, o = _a.o, bg = _a.bg, rows = _a.rows, children = _a.children, position = _a.position, customStyle = _a.style, rest = __rest(_a, ["theme", "m", "mb", "mt", "mr", "ml", "my", "mx", "p", "pb", "py", "pt", "pr", "pl", "px", "radius", "avatar", "circle", "center", "border", "shadow", "f", "h", "w", "align", "justify", "self", "dir", "flexWrap", "o", "bg", "rows", "children", "position", "style"]);
    var _space = spaceUtils({
        m: m,
        mb: mb,
        mt: mt,
        mr: mr,
        ml: ml,
        my: my,
        mx: mx,
        p: p,
        pb: pb,
        py: py,
        pt: pt,
        pr: pr,
        pl: pl,
        px: px,
        theme: theme,
    });
    var _align = boxAlignUtils({ center: center });
    var _border = borderUtils({ border: border, theme: theme });
    var _shadow = shadowUtils({ shadow: shadow, theme: theme });
    var _size = boxSizeUtils({ w: w, h: h });
    var _flex = boxFlexUtils({ align: align, justify: justify, dir: dir, f: f, self: self, flexWrap: flexWrap });
    var _radius = radiusUtils({
        theme: theme,
        radius: radius,
        circle: circle,
        avatar: avatar,
        children: children,
        size: { height: h, width: w },
    });
    var _opacity = opacityUtils({ o: o, theme: theme });
    var _position = positionUtils({ position: position });
    var _style = {};
    var themeColor = get(theme, 'color');
    if (bg) {
        var color = themeColor[bg];
        if (color) {
            _style.backgroundColor = color;
        }
        else {
            _style.backgroundColor = bg;
        }
    }
    var newChild;
    if (avatar) {
        newChild = _radius.children;
    }
    else {
        newChild = boxRowsUtils({ rows: rows, children: children });
    }
    var _customStyle = flattenStyle(customStyle);
    var style = reactNative.StyleSheet.create({
        box: __assign({}, _style, _space, _align, _border, _shadow, _size, _flex, _radius.style, _opacity, _position, _customStyle),
    });
    return (React.createElement(reactNative.View, __assign({}, rest, { style: style.box }), newChild));
};
Box.defaultProps = {
    style: {},
};
Box.displayName = 'Box';
var Box$1 = connect(Box);

var textSizeUtils = function (props) {
    var _style = {};
    var themeSize = get(props, ['theme', 'text', 'size']);
    if (themeSize) {
        var base = get(themeSize, 'base');
        _style.fontSize = base;
        var size = get(props, 'size');
        if (size) {
            if (typeof size === 'string') {
                var _size = themeSize[size];
                if (typeof _size === 'number') {
                    _style.fontSize = _size;
                }
            }
            else if (typeof size === 'number') {
                _style.fontSize = size;
            }
        }
    }
    return _style;
};

var weightUtils = function (props) {
    var _style = {};
    var lightWeight = get(props, ['theme', 'text', 'weight', 'light']);
    var normalWeight = get(props, ['theme', 'text', 'weight', 'normal']);
    var boldWeight = get(props, ['theme', 'text', 'weight', 'bold']);
    _style.fontWeight = normalWeight;
    var light = get(props, 'light');
    if (light && lightWeight) {
        _style.fontWeight = lightWeight;
    }
    var normal = get(props, 'normal');
    if (normal && normalWeight) {
        _style.fontWeight = normalWeight;
    }
    var bold = get(props, 'bold');
    if (bold && boldWeight) {
        _style.fontWeight = boldWeight;
    }
    var weight = get(props, 'weight');
    if (typeof weight === 'string') {
        _style.fontWeight = weight;
    }
    return _style;
};

var colorUtils = function (props) {
    var _style = {};
    var themeColor = get(props, ['theme', 'color']);
    var color = get(props, 'color');
    if (themeColor) {
        var black = get(themeColor, 'black');
        if (black) {
            _style.color = black;
        }
        if (color) {
            var _color = themeColor[color];
            if (_color) {
                _style.color = _color;
            }
            else {
                _style.color = color;
            }
        }
    }
    return _style;
};

var textAlignUtils = function (props) {
    var _style = {};
    var center = get(props, 'center');
    if (center) {
        _style.textAlign = 'center';
    }
    var left = get(props, 'left');
    if (left) {
        _style.textAlign = 'left';
    }
    var right = get(props, 'right');
    if (right) {
        _style.textAlign = 'right';
    }
    return _style;
};

var letterSpacingUtils = function (props) {
    var _style = {};
    var themeSpacing = get(props, ['theme', 'text', 'spacing']);
    var ls = get(props, 'ls');
    if (themeSpacing) {
        _style.letterSpacing = get(props, ['theme', 'text', 'spacing', 'normal']);
    }
    if (typeof ls === 'string' && themeSpacing) {
        var space = themeSpacing[ls];
        if (space) {
            _style.letterSpacing = space;
        }
    }
    else if (typeof ls === 'number') {
        _style.letterSpacing = ls;
    }
    return _style;
};

var capitalizeText = function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
};
var capitalizeEachWords = function (str) {
    return str
        .split(' ')
        .map(capitalizeText)
        .join(' ')
        .trim();
};
var thousandSeparator = function (str) {
    return String(str).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
};
var textManipulationUtils = function (props) {
    var newChild = props.children;
    if (typeof props.children === 'string') {
        var uppercase = get(props, 'uppercase');
        var lowercase = get(props, 'lowercase');
        var capitalize = get(props, 'capitalize');
        var capitalizeEach = get(props, 'capitalizeEach');
        var thousand = get(props, 'thousand');
        if (uppercase) {
            newChild = props.children.toUpperCase();
        }
        if (lowercase) {
            newChild = props.children.toLowerCase();
        }
        if (capitalize) {
            newChild = capitalizeText(props.children);
        }
        if (capitalizeEach) {
            newChild = capitalizeEachWords(props.children);
        }
        if (thousand) {
            newChild = thousandSeparator(props.children);
        }
    }
    return newChild;
};

var fontStyleUtils = function (props) {
    var _style = {};
    var italic = get(props, 'italic');
    if (italic) {
        _style.fontStyle = 'italic';
    }
    return _style;
};

var lineHeightUtils = function (props, fontSize) {
    var _style = {};
    var themeLineHeight = get(props, ['theme', 'text', 'lineHeight']);
    var height = get(props, 'lineH');
    if (typeof height === 'number') {
        _style.lineHeight = height;
    }
    else if (themeLineHeight && typeof fontSize === 'number') {
        var normal = get(themeLineHeight, 'normal');
        if (typeof normal === 'number') {
            _style.lineHeight = fontSize * normal;
        }
        if (height) {
            var _size = void 0;
            if (typeof height === 'string') {
                _size = themeLineHeight[height];
            }
            else if (typeof height === 'number') {
                _size = height;
            }
            if (typeof _size === 'number') {
                _style.lineHeight = fontSize * _size;
            }
        }
    }
    return _style;
};

var decoUtils = function (props) {
    var _style = {};
    var deco = get(props, 'deco');
    if (typeof deco === 'string') {
        if (deco === 'none') {
            _style.textDecorationLine = 'none';
        }
        else if (deco === 'underline') {
            _style.textDecorationLine = 'underline';
        }
        else if (deco === 'through') {
            _style.textDecorationLine = 'line-through';
        }
        else if (deco === 'underline-through') {
            _style.textDecorationLine = 'underline line-through';
        }
    }
    return _style;
};

var fontFamilyUtils = function (props) {
    var _style = {};
    var themeFamily = get(props, ['theme', 'text', 'fonts']);
    if (themeFamily) {
        var base = get(themeFamily, 'base');
        if (typeof base === 'string') {
            _style.fontFamily = base;
        }
        var font = get(props, 'font');
        if (typeof font === 'string') {
            var _font = get(themeFamily, font);
            if (typeof _font === 'string') {
                _style.fontFamily = _font;
            }
        }
    }
    return _style;
};

var Text = function (_a) {
    var theme = _a.theme, border = _a.border, color = _a.color, m = _a.m, mb = _a.mb, mt = _a.mt, mr = _a.mr, ml = _a.ml, my = _a.my, mx = _a.mx, p = _a.p, pb = _a.pb, pt = _a.pt, pr = _a.pr, pl = _a.pl, px = _a.px, py = _a.py, ls = _a.ls, lowercase = _a.lowercase, uppercase = _a.uppercase, capitalize = _a.capitalize, capitalizeEach = _a.capitalizeEach, thousand = _a.thousand, font = _a.font, center = _a.center, right = _a.right, left = _a.left, lineH = _a.lineH, size = _a.size, bold = _a.bold, normal = _a.normal, light = _a.light, weight = _a.weight, o = _a.o, italic = _a.italic, deco = _a.deco, customStyle = _a.style, children = _a.children, rest = __rest(_a, ["theme", "border", "color", "m", "mb", "mt", "mr", "ml", "my", "mx", "p", "pb", "pt", "pr", "pl", "px", "py", "ls", "lowercase", "uppercase", "capitalize", "capitalizeEach", "thousand", "font", "center", "right", "left", "lineH", "size", "bold", "normal", "light", "weight", "o", "italic", "deco", "style", "children"]);
    var _space = spaceUtils({
        m: m,
        mb: mb,
        mt: mt,
        mr: mr,
        ml: ml,
        my: my,
        mx: mx,
        p: p,
        pb: pb,
        py: py,
        pt: pt,
        pr: pr,
        pl: pl,
        px: px,
        theme: theme,
    });
    var _size = textSizeUtils({ size: size, theme: theme });
    var _weight = weightUtils({ bold: bold, normal: normal, light: light, theme: theme, weight: weight });
    var _color = colorUtils({ color: color, theme: theme });
    var _align = textAlignUtils({
        center: center,
        right: right,
        left: left,
        theme: theme,
    });
    var _spacing = letterSpacingUtils({ ls: ls, theme: theme });
    var _border = borderUtils({ border: border, theme: theme });
    var _fontStyle = fontStyleUtils({ italic: italic });
    var _lineHeight = lineHeightUtils({ lineH: lineH, theme: theme }, _size.fontSize);
    var _deco = decoUtils({ deco: deco });
    var _opacity = opacityUtils({ o: o, theme: theme });
    var _fontFamily = fontFamilyUtils({ font: font, theme: theme });
    var child = textManipulationUtils({
        capitalize: capitalize,
        capitalizeEach: capitalizeEach,
        lowercase: lowercase,
        uppercase: uppercase,
        children: children,
        thousand: thousand,
    });
    var _customStyle = flattenStyle(customStyle);
    var style = reactNative.StyleSheet.create({
        text: __assign({}, _space, _size, _weight, _color, _align, _spacing, _border, _fontStyle, _lineHeight, _deco, _opacity, _fontFamily, _customStyle),
    });
    return (
    // @ts-ignore
    React.createElement(reactNative.Text, __assign({}, rest, { style: style.text }), child));
};
Text.defaultProps = {
    style: {},
};
Text.displayName = 'Text';
var Text$1 = connect(Text);

exports.Box = Box$1;
exports.UtilityThemeProvider = UtilityThemeProvider;
exports.Text = Text$1;
//# sourceMappingURL=ReactNativeDesignUtility.js.map
