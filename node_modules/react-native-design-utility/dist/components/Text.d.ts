import * as React from 'react';
import { TextProps, TextStyle, StyleProp } from 'react-native';
import { ITheme } from '../types/ITheme';
import { SpaceType } from '../types/Space';
import { FontSizeType } from '../types/FontSize';
import { LetterSpacingType } from '../types/LetterSpacing';
import { LineHeightType } from '../types/LineHeight';
import { TextDecoType } from '../types/TextDeco';
import { OpacityType } from '../types/OpacityType';
export interface IInjectedProps {
    theme: ITheme;
}
export interface UtilityTextProps extends TextProps {
    style?: StyleProp<TextStyle>;
    border?: number;
    italic?: boolean;
    lineH?: LineHeightType | string | number;
    deco?: TextDecoType;
    o?: OpacityType | number | string;
    center?: boolean;
    left?: boolean;
    right?: boolean;
    color?: string;
    font?: string;
    m?: SpaceType;
    mb?: SpaceType;
    mt?: SpaceType;
    mr?: SpaceType;
    ml?: SpaceType;
    mx?: SpaceType;
    my?: SpaceType;
    p?: SpaceType;
    pb?: SpaceType;
    pt?: SpaceType;
    pr?: SpaceType;
    pl?: SpaceType;
    px?: SpaceType;
    py?: SpaceType;
    ls?: LetterSpacingType | number | string;
    size?: FontSizeType | string | number;
    uppercase?: boolean;
    lowercase?: boolean;
    capitalize?: boolean;
    capitalizeEach?: boolean;
    thousand?: boolean;
    bold?: boolean;
    light?: boolean;
    normal?: boolean;
    weight?: string;
}
declare const _default: {
    new (props: Readonly<UtilityTextProps>): {
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<UtilityTextProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<UtilityTextProps>;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    new (props: UtilityTextProps, context?: any): {
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<UtilityTextProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<UtilityTextProps>;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    displayName: string;
};
export default _default;
